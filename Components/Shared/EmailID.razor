@using Microsoft.AspNetCore.Components.Forms
@inherits InputBase<string>
@using Services

<div class="NameInputComp">
    <div class="labelDiv">
        <label>@LabelValue</label>
    </div>

    <div class="inputDiv">
        <input type="text" class="form-input" value="@CurrentValue" @oninput="OnInputValueChanged"
               placeholder="@InputTextPlaceholder" id="inputTextId" disabled="@IsDisabled" readonly="@Isreadonly" />
    </div>

    <div class="errorMessage">
        @if (DisplayErrorMessage)
        {
            <label>@ErrorMessage</label>
        }
    </div>
</div>

@code {

    [Parameter]
    public string LabelValue { get; set; }

    [Parameter]
    public string InputTextValue { get; set; }

    [Parameter]
    public EventCallback<string> InputTextChanged { get; set; }

    [Parameter]
    public string InputTextPlaceholder { get; set; }

    [Parameter]
    public string InputTextId { get; set; }

    [Parameter]
    public bool Isreadonly { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    private bool IsValidName(string name)
    {
        
        if (string.IsNullOrWhiteSpace(name))
        {
            return false;
        }

        // allowed characters including alphabets and whitespace
        string allowedCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.@";

        // To Check if all characters in the name are allowed
        foreach (char c in name)
        {
            
            if (!allowedCharacters.Contains(c))
            {
                return false;
            }
        }

        return true;
    }

    private async Task OnInputValueChanged(ChangeEventArgs args)
    {
        string newValue = args.Value.ToString();

        if (IsValidName(newValue))
        {
            CurrentValue = newValue;
            DisplayErrorMessage = false;
            await InputTextChanged.InvokeAsync(CurrentValue);
        }
        else
        {
            ErrorMessage = "Invalid Email Format.Please Enter Valid Email";
            DisplayErrorMessage = true;
            StateHasChanged();

            await Task.Delay(3000);
            ErrorMessage = string.Empty;
            DisplayErrorMessage = false;
        }
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    [Parameter]
    public bool DisplayErrorMessage { get; set; }

    [Parameter]
    public string ErrorMessage { get; set; }
}
